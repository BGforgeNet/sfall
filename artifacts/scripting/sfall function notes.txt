
> any sfall_funcX(string funcName, ...)
- these opcodes allows to use additional scripting functions, that do not require new opcode
- first argument is always function name (string)
- there are 7 versions of this opcode for different number of additional arguments (for convenience)
- opcodes have return value, but it is not necessary to use it


------------------------------------
------ sfall_funcX functions -------
------------------------------------

> array sfall_func0("get_metarule_table")
- returns names of all currently available scripting functions (via sfall_funcX)

> int sfall_func1("spatial_radius", object object)
- return radius of spatial script, associated with given dummy-object (returned by create_spatial)

> object sfall_func2("critter_inven_obj2", object invenObj, int type)
- works just like vanilla critter_inven_obj, but correctly reports item in player's inactive hand slot

> void sfall_func0("intface_redraw")
- redraws main game interface
- useful after direct changes to current player weapons or stats to reflect changes

> void sfall_func0("intface_hide")
- hides main interface

> void sfall_func0("intface_show")
- shows main interface

> int sfall_func0("intface_is_hidden")
- returns 1 if interface is currently hidden, 0 otherwise

> void sfall_func0("exec_map_update_scripts")
- executes map_update_p_proc for all objects on map and global/hook scripts as well

> void sfall_func2("set_ini_setting", string setting, int/string value)
- writes an integer or a string value to an ini file in the Fallout directory. If the ini file does not exist, it will be created
- The setting argument works in the same way as in get_ini_setting; seperate the file name, section and key with a '|' character; e.g. 'set_ini_setting("myini.ini|mysec|var1", 42)'
- The file name is limited to 63 chars, including the extension
- The section name is limited to 32 characters

> int sfall_func1("floor2", int/float value)
- works just like vanilla floor function, but returns correct integers for negative values
- vanilla floor function works exactly the same as ceil for negative values, much like trunc in C/C++

> int sfall_func1("item_weight", object)
- gets the current weight of an object

> int sfall_func1("get_outline", object)
- gets the current outline color for an object

> void sfall_func2("set_outline", object, int color)
- sets the outline color of an object
- 0 means or any value above 0x00FFFFFF disables the outline
- call "tile_refresh_display" after changing outline of objects to properly redraw the scene

> int sfall_func1("get_flags", object)
- gets the current value of object flags (see define_extra.h for available flags)

> void sfall_func2("set_flags", object, int flags)
- sets the current flags of an object
- all flags are rewritten with given integer, so first get current flags with "get_flags" and use bwor/bwand to set/remove specific flag

> void sfall_func0("tile_refresh_display")
- redraws the game scene (tiles, walls, objects, etc.)

> object sfall_func0("outlined_object")
- returns an object that is currently highlighted by hovering the mouse above it

> object sfall_func1("set_dude_obj", critter)
- take control of a given critter
- passing 0 will reset control back to "real" dude

> void sfall_func0("real_dude_obj")
- returns the initial dude_obj after set_dude_obj was used

> array sfall_func1("get_ini_sections", string fileName)
- returns an array of names of all sections in a given INI file

> array sfall_func2("get_ini_section", string fileName, string section)
- returns an associative array of keys and values for a given INI file and section

> int sfall_func0("car_gas_amount")
- returns current amount of fuel in player's car (between 0 and 80000)
- to change fuel amount, use vanilla function: metarule(METARULE_GIVE_CAR_GAS, amount) - amount can be positive or negative

> void sfall_func1("set_car_intface_art", int artIndex)
- changes the interface art (index in LST file) for the car image on worldmap screen
- should be called before going to worldmap
- vanilla art index is 0x1B1

> int sfall_func0("get_cursor_mode")
- returns the current cursor mode (0 - movement cursor, 1 - command cursor, 2 - targeting cursor)
- mode 4 to 10 are Skilldex skills (yellow targeting cursor)

> void sfall_func1("set_cursor_mode", int mode)
- sets the current cursor mode

> void sfall_func0("display_stats")
- displays player stats in the inventory screen display window
- works only in opened inventory

> int sfall_func1("lock_is_jammed", object)
- returns 1 if the lock (container or scenery) is currently jammed, 0 otherwise

> void sfall_func1("unjam_lock", object)
- unjams a lock immediately without having to wait until the next day, or leave the map and then return after 24 hours
- does not work in use_skill_on_p_proc procedure

> void sfall_func1("set_unjam_locks_time", int time)
- sets after how many hours (up to 127 hours) jammed locks will be unjammed if the player leaves the map
- also disables the auto unjam that occurs at midnight when the player is on the map
- passing 0 will disable the auto unjam mechanism completely
- The auto unjam mechanism will be reset each time the player reloads the game

> array sfall_func0("get_map_enter_position")
- returns an array of the player's position data (index 0 - tile, 1 - elevation, 2 - rotation) when entering the map through exit grids
- if entering from the world map, the tile value will be -1
- should be called in map_enter_p_proc procedure to get the correct position data

> void sfall_func3("set_map_enter_position", int tile, int elevation, int rotation)
- overrides the player's entry position when entering the map through exit grids
- setting the tile to 0 will put the player on the start hex (default tile and elevation) of the map
- works only in map_enter_p_proc procedure

> void sfall_func1("set_rest_heal_time", int minutes)
- sets the time interval in minutes for healing during resting. The default is 180
- The time interval will be reset each time the player reloads the game

> void sfall_func1("set_rest_mode", int mode)
- sets the bit flags for the rest mode (see RESTMODE_* constants in sfall.h)
- passing 0 will reset the rest mode. It will also be reset each time the player reloads the game

> int sfall_func0("attack_is_aimed")
- returns 1 if the aimed attack mode is selected, 0 otherwise

> void sfall_func3("set_iface_tag_text", int tag, string text, int color)
- sets the text messages and colors for custom notification boxes to the interface without the need to add messages to intrface.msg and set up the font colors in ddraw.ini
- tag value is the same as used in show_iface_tag, hide_iface_tag, and is_iface_tag_active. The valid range is from 5 to (4 + the value of BoxBarCount in ddraw.ini) or the number of the last custom box added using the add_ifaca_tag function
- The text is limited to 19 characters
- available colors: 0 - green, 1 - red, 2 - white, 3 - yellow, 4 - dark yellow, 5 - blue, 6 - purple, 7 - dull pink

> int sfall_func0("add_iface_tag")
- adds one custom box to the current boxes, and returns the number of the added tag (-1 if the tags limit is exceeded)
- The maximum number of boxes is limited to 126 tags

> void sfall_func1("inventory_redraw", int invSide)
- redraws inventory list in the inventory/use inventory item on/loot/barter screens
- invSide specifies which side needs to be redrawn: 0 - the player, 1 - target (container/NPC in loot/barter screens)

> void sfall_func3("item_make_explosive", int pid, int activePid, int damage)
> void sfall_func4("item_make_explosive", int pid, int activePid, int min, int max)
- makes the specified item (pid) an explosive item like Dynamite or Plastic Explosives
- activePid is for an item with an active timer, can be the same as the pid argument
- the item proto must be "Misc Item" type and have "Use" action flag
- min/max are the minimum and maximum explosion damage
- using the function on an item that is already set as an explosive will override its previous settings
- NOTE: this function does not work for pid's of Dynamite and Plastic Explosives

> int sfall_func1("get_string_pointer", string text)
- returns a pointer to a string variable or to a text

> void sfall_func1("dialog_message", string text)
- displays a message in the NPC response window in dialog or barter screen

> int sfall_func1("get_current_inven_size", object)
- returns the current inventory size of the container or the critter

> void sfall_func5("create_win", string winName, int x, int y, int width, int height)
> void sfall_func6("create_win", string winName, int x, int y, int width, int height, int flags)
- works just like vanilla CreateWin function, but creates a window with MoveOnTop flag if the flags argument is not specified, and allows to set additional flags for the created window
- MoveOnTop flag allows the created window to be placed on top of the game interface

> void sfall_func3("set_can_rest_on_map", int mapNum, int elev, bool value)
- allows/disallows to rest on the map for the specified level, overrides the can_rest_here values in maps.txt
- mapNum is the map index from maps.txt
- passing -1 to the elev argument will set the rest value for all map elevations
- the set rest value will be stored in sfalldb.sav file (in savegame)

> int sfall_func2("get_can_rest_on_map", int mapNum, int elev)
- returns the set rest value of the map after using the set_can_rest_on_map function
- returns -1 if the rest value of the map was not previously set (i.e. no data for the map in sfalldb.sav)
- the can_rest_here values in maps.txt are ignored

> object sfall_func0("dialog_obj")
- returns a pointer to the object (critter) the player is having a conversation or bartering with

> object sfall_func2("obj_under_cursor", bool crSwitch, bool inclDude)
- returns the object under the cursor on the main game screen
- crSwitch: True - only checks critters and ignores their cover (roof tiles, walls, scenery, etc.), False - checks all objects (can't check critters under objects)
- passing False to the inclDude argument will ignore dude_obj

> object sfall_func0("loot_obj")
- returns a pointer to the target object (container or critter) of the loot screen

> int sfall_func2("get_object_data", object, int offset)
- returns the data at the specified offset of an object (see OBJ_DATA_* constants in define_extra.h for offsets)

> void sfall_func3("set_object_data", object, int offset, int data)
- sets the data at the specified offset of an object

> int sfall_func2("get_object_ai_data", object, int aiParam)
- returns the setting value from the AI packet of an object (critter)
- use AI_CAP_* constants from define_extra.h for the aiParam argument to get AI value

> void sfall_func0("art_cache_clear")
- clears the cache of FRM image files loaded into memory

> void sfall_func1("npc_engine_level_up", bool toggle)
- enables/disables the engine function that increases the level of party members in the player leveling process
- if the engine function is disabled, the process of leveling up party members should be performed by script functions

> void sfall_func3("set_drugs_data", int type, int pid, int value)
- overrides the parameters of drugs set in the configuration file (DrugsFile setting in ddraw.ini)
- type: 0 - changes the value of NumEffects for the drug (see Drugs.ini for the description of NumEffects)
        1 - changes the duration of the addiction effect for the drug (a value of 1 = one game minute)

> int sfall_func1("set_unique_id", object)
> int sfall_func2("set_unique_id", object, int flag)
- assigns a unique ID number to the object and returns it. If a unique ID number has already been assigned to an object, then ID number is returned without reassignment
- items with unique IDs will not stack with other items of the same type in the inventory
- to just get the current ID number of an object, use sfall_func2("get_object_data", object, OBJ_DATA_ID)
- unique ID numbers are saved in your savegame, and have a range from 0x10000000 to 0x7FFFFFFF
- there is also a unique ID number range for the player and party members from 18000 to 83535
- to assign a new ID number generated by the engine to the object (i.e. unassign a unique ID), call the function with two arguments and pass -1 for the flag argument

> void sfall_func5("draw_image", string/int pathFile/artId, int frame, int x, int y, bool noTransparent)
> void sfall_func6("draw_image_scaled", string/int pathFile/artId, int frame, int x, int y, int width, int height)
- displays the specified FRM image in the active window created by vanilla CreateWin or sfall's create_win script function
- pathFile/artId: path to the FRM file (e.g. "art\\inven\\5mmap.frm"), or its FRM ID number (e.g. 117440550, see specification of the FID format)
optional arguments:
- frame: frame number, the first frame starts from zero
- x/y: offset relative to the top-left corner of the window
- width/height: image size, used to scale the image when displaying it. Pass -1 to either width or height to keep the aspect ratio when scaling
- noTransparent: pass true to display an image without transparent background
- NOTE: to omit optional arguments starting from the right, call the functions with different sfall_funcX (e.g. sfall_func4("draw_image", pathFile, frame, x, y))
- if draw_image_scaled is called without x/y/width/height arguments, the image will be scaled to fit the window without transparent background

> void sfall_func5("set_fake_perk_npc", object npc, string namePerk, int level, int image, string desc)
> void sfall_func5("set_fake_trait_npc", object npc, string nameTrait, int active, int image, string desc)
> void sfall_func5("set_selectable_perk_npc", object npc, string namePerk, int active, int image, string desc)
> int  sfall_func2("has_fake_perk_npc", object npc, string namePerk)
> int  sfall_func2("has_fake_trait_npc", object npc, string nameTrait)
- these functions are similar to has_fake_*/set_fake_*/set_selectable_perk functions, but apply to the specified party member NPC (including dude_obj)

