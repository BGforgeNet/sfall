keywords:
  type: 1 #text
  items:
    - name: begin
    - name: end
    - name: procedure

base-functions:
  type: 3 #function
  items:
    - name: action_being_used
      detail: "int action_being_used"
      doc: "Returns the current skill being used on a script object."
    - name: activateregion
    - name: add_obj_to_inven
      detail: "void add_obj_to_inven(ObjectPtr who, ObjectPtr item)"
      doc: "Adds an object (item) to another object's (who's) inventory. Note that this only works with objects of type Item."
    - name: AddNamedHandler
      detail: "void AddNamedHandler(ObjectPtr name, Procedure proc)"
      doc: "Adds named handler (proc) for event (name). Can be signaled many times."
    - name: AddNamedEvent
      detail: "void AddNamedEvent(ObjectPtr name, Procedure proc)"
      doc: "Adds named handler (proc) for event (name). Can be signaled only once, and removed afterwards."
    - name: add_mult_objs_to_inven
      detail: "void add_mult_objs_to_inven(ObjectPtr who, ObjectPtr item, int count)"
      doc: "Adds (count) instances of an object (item) to another object's (who's) inventory. Note that this only works with objects of type Item."
    - name: add_timer_event
      detail: "void add_timer_event(ObjectPtr obj, int time, int info)"
      doc: "Adds a timed event call to the queue, at a given time offset, to call an object's (obj) script. Info is used to let scripts differentiate between timed event calls so that they can be hooked in multiple times. Info is read back by the script using the fixed_param operator. Note that time is in ticks (you can use game_ticks(seconds_num) to get the time in ticks from time in seconds)."
    - name: anim
      detail: "void anim(ObjectPtr who, int anim, int direction)"
      doc: "Sets up a single-frame animation (anim) for the object (who) that runs in the given direction."
    - name: anim_action_frame
      detail: "int anim_action_frame(ObjectPtr who, int frame)"
      doc: "Returns the action frame of the given art frame on a given object (who). This can be used as the delay in an animation registration sequence."
    - name: anim_busy
      detail: "int anim_busy(ObjectPtr who)"
      doc: "Returns True if object (who) is currently animating, otherwise False. This can be used to determine if a given object has completed an animation."
    - name: animate_move_obj_to_tile
      detail: "void animate_move_obj_to_tile(ObjectPtr who, int tile, int speed)"
      doc: "Sets up an animation for a critter (who) to walk to a given tile (hex) at a given speed (speed). Speed (walk/run) can also have a flag attached (see define.h) to force the object (who) to stop it's current animation (for instance, if it was already walking somewhere) and then walk/run to the new location (tile)."
    - name: animate_rotation
      detail: "void animate_rotation(int direction)"
      doc: "(Fallout 2 only) Changes the orientation (facing) of the self-object to the given direction (0-5)."
    - name: animate_run_to_tile
      detail: "void animate_run_to_tile(int tile)"
      doc: "(Fallout 2 only) Sets up an animation for the self-object to RUN to a given tile (hex)."
    - name: animate_set_frame
      detail: "void animate_set_frame(int newFrame)"
      doc: "Changes the current animation frame of the self-object to the given frame # (newFrame). This can be used to make lights go to broken lights or to alarm/siren lights, for example. Should be used in place of animate_stand for 2-frame anims."
    - name: animate_stand
      detail: "void animate_stand"
      doc: "Sets up an animation for the currently focused object (self) to run it's stand animation. This can be used to open doors, open container items (Refridgerator, for example) or to run a critter's fidget animation."
    - name: animate_stand_obj
      detail: "void animate_stand_obj"
      doc: "Sets up an animation for an object (obj) to run it's stand animation. This can be used to open doors, open container items (refridgerator, for example) or to run a critter's fidget animation."
    - name: animate_stand_reverse
      detail: "void animate_stand_reverse"
      doc: "Sets up an animation for the currently focused object (self) to run it's stand animation in reverse. This is used only for non-critters, to cause them to close (close doors, open containers, etc."
    - name: animate_stand_reverse_obj
      detail: "void animate_stand_reverse_obj(ObjectPtr obj)"
      doc: "Sets up an animation for an object (obj) to run it's stand animation in reverse. This is used only for non-critters, to cause them to close (close doors, open containers, etc.)"
    - name: art_anim
      detail: "void art_anim(int fid)"
      doc: "Returns the animation that this fid represents (ANIM_stand, ANIM_pickup, etc.)"
    - name: attack
      detail: "void attack(ObjectPtr who)"
      doc: "Causes the focused object (self) to attempt to attack an object (who). This is a macro to attack_complex()."
    - name: attack_complex
      detail: "void attack_complex(ObjectPtr who, int called_shot, int num_attacks, int bonus, int min_damage, int max_damage, int attacker_results, int target_results"
      doc:
        "Causes the current object (self - must be a critter) to attempt to attack a critter (who) with various parameters modifying the combat:
        called_shot - 0/1/specific means none/random/specific (head, torso, etc.)
        num_attacks - the # of extra attacks the self object gets before the target
        bonus - the bonus to hit the target on the first turn only
        min_damage - the minimum damage that will be done the first attack
        max_damage - the maximum damage that will be done the first attack
        attacker_results - what state the attacker ends in after the first attack
        target_results - what state the target ends in after the first attack"
    - name: attack_setup
      detail: "void attack_setup(ObjectPtr who, ObjectPtr victim)"
      doc: "Sets up an attack from who on victim, without expecting this script to be involved. Can be used to setup attacks on critters from the map script."

    - name: car_current_town
      detail: "int car_current_town"
      doc: "Returns the current town area the car can be found at. Area #'s can be found in scripts/headers/maps.h"
    - name: car_give_to_party
      detail: "int car_give_to_party"
      doc: "Gives the car to the party, and takes them to the worldmap."
    - name: car_give_gas
      detail: "int car_give_gas(int amount)"
      doc: "(Fallout 2 only) Gives the car a given amount of gas."
    - name: combat_difficulty
      detail: "int combat_difficulty"
      doc: "Returns the current Combat difficulty level of the game (defined in the options screen). Value is 0-2."
    - name: combat_is_initialized
      detail: "int combat_is_initialized"
      doc: "Returns True if the system is currently in combat mode, False otherwise."
    - name: ClearNamed
      detail: "void ClearNamed(string event)"
      doc: "Removes all handlers for named event."
    - name: create_object
      detail: "ObjectPtr create_object(int pid, int tile_num, int elev"
      doc: "Creates a new object of prototype (pid), placing it at a given tile number and at a given elevation (0-2). If the prototype indicates a script should be attached, then it will be."
    - name: create_object_sid
      detail: "ObjectPtr create_object_sid(int pid, int tile_num, int elev, int sid"
      doc: "Creates a new object of prototype (pid), placing it at a given tile # and at a given elevation (0-2). If sid is not -1, then it indicates that the default script should be overriden by this new script #."
    - name: critter_add_trait
      detail: "int critter_add_trait(ObjectPtr who, int trait_type, int trait, int amount"
      doc: "Adds a particular trait (trait) of a given type (trait_type) to a particular critter (who). Possible traits under the SPECIAL system are limited to Perks, Traits, Object-instance information (such as team #'s, ai-packet #'s, etc.)"
    - name: critter_attempt_placement
      detail: "int critter_attempt_placement(ObjectPtr who, int hex, int elev)"
      doc: "Attempts to place a critter at a given destination hex & elevation (0-2), if it fails, then it tries to find a nearby hex that is that is as near as possible to the start hex. No LONGER checks to see if the hex is visible on-screen."
    - name: critter_damage
      detail: "void critter_damage(ObjectPtr who, int dmg_amount)"
      doc: "(Fallout 2 only) Inflicts damage on a critter (who) of a given amount, killing it if necessary."
    - name: critter_heal
      detail: "void critter_heal(ObjectPtr who, int amount)"
      doc: "Heals a critter for a given amount (if given a value above their MaxHP will go up to their maximum HP). [Note: can also input negative amounts, causing the critter to be hurt for that amount. This is useful because it bypasses all resistances and thresholds"
    - name: critter_injure
      detail: "int critter_injure(ObjectPtr who, int how)"
      doc: "Injures a given critter (who) by crippling given limbs/body parts (defined by DAM_CRIP_ARM_LEFT, DAM_BLIND, etc. in define.h)"
    - name: critter_inven_obj
      detail: "ObjectPtr critter_inven_obj(ObjectPtr who, int where)"
      doc: "Returns a pointer to an object that is in a given spot (NULL if none). The appropriate values for where are: INVEN_TYPE_WORN, INVEN_TYPE_RIGHT_HAND, and INVEN_TYPE_LEFT_HAND."
    - name: critter_is_fleeing
      detail: "int critter_is_fleeing(ObjectPtr who)"
      doc: "Returns True if the critter object (who) has its FLEE flag set."
    - name: critter_mod_skill
      detail: "int critter_mod_skill(ObjectPtr who, int skill, int amount)"
      doc: "Modifies a given skill in a given critter object (who) by a given amount. NOTE: this currently is only valid on the player (obj_dude) object."
    - name: critter_rm_trait
      detail: "int critter_rm_trait(ObjectPtr who, int trait_type, int trait, int amount)"
      doc: "Removes a particular trait (trait) of a given type (trait_type) from a particular critter (who)."
    - name: critter_set_flee_state
      detail: "int critter_set_flee_state(ObjectPtr who, bool flee_on"
      doc: "Sets the FLEE flag on or off. This controls whether the critter flees during combat."
    - name: critter_skill_level
      detail: "int critter_skill_level(ObjectPtr who, int skillNum)"
      doc: "Returns the current skill level of a particular object's (who) skill (skillNum)."
    - name: critter_state
      detail: "int critter_state(ObjectPtr who)"
      doc: "Returns the state of a given critter object (from combat data), used to determine if a critter is dead, unconscious, etc."
    - name: critter_stop_attacking
      detail: "int critter_stop_attacking(ObjectPtr who)"
      doc: "Flags the critter object (who) as no longer wishing to be active in combat."
    - name: cur_map_index
      detail: "int cur_map_index"
      doc: "Returns the index # of the current map, to be matched with the define-constant in define.h."
    - name: cur_town
      detail: "int cur_town"
      doc: "Returns the index # of the current town, to be matched with the define-constant in define.h."

    - name: days_since_visited
      detail: "int days_since_visited"
      doc: "Returns the number of days since this map was last visited, or (-1) if it has never been visited before."
    - name: debug_msg
      detail: "void debug_msg(string text)"
      doc: "Prints a string to the debug monitor. Should be used exclusively for debug information, instead of display_msg()! The user will never see these messages unless they have debugging enabled and activated. If they have debugging enabled and DEBUGLOG set, the messages will only show up in debug.log file."
    - name: destroy_object
      detail: "int destroy_object(ObjectPtr obj)"
      doc: "Destroys an object (obj), which will call its script in the destroy_proc section if the object is *NOT* the calling object."
    - name: destroy_mult_objs
      detail: "int destroy_mult_objs(ObjectPtr item, int count)"
      doc: "Destroys count number of instances of an item object. This function will figure out which inventory this item is in (if it isn't on the ground). If it is on the ground, of course, there is only one instance of this object, so only one will be destroyed."
    - name: dialogue_reaction
      detail: "void dialogue_reaction(int mood)"
      doc: "Set up a reaction animation in the dialogue system."
    - name: "dialogue_system_enter"
      detail: "void dialogue_system_enter"
      doc: "Tells the dialog system that this object is requesting the talk system. This is used when the script wants to start dialog instead of waiting for the player to initiate it. The script will be called back in its talk_proc section."
    - name: difficulty_level
      detail: "int difficulty_level"
      doc: "Returns the current Game difficulty level of the game (defined in the options screen)."
    - name: display_msg
      detail: "void display_msg(string message)"
      doc: "Displays a string on the in-game PDA display (lower-left hand corner)."
    - name: do_check
      detail: "int do_check(ObjectPtr who, int check, int modifier)"
      doc: "Do a check/test-roll versus one of the various basic traits (strength, perception, etc.). Note: these cannot generate Critical Success or Critical Failure as they are a basic X==Y check."
    - name: drop_obj
      detail: "drop_obj(ObjectPtr obj)"
      doc: "Causes the critter self-object to remove a given object (obj) from it's inventory and place it on the ground at its hex. This animates the self_obj."
    - name: drug_influence
      detail: "int drug_influence(ObjectPtr who)"
      doc: "Returns True if a given critter object (who) is currently under any drug influences, False otherwise."
    - name: dude_obj
      detail: "ObjectPtr dude_obj"
      doc: "Returns a pointer to the dude object (the player)."
    - name: elevation
      detail: "int elevation(ObjectPtr obj)"
      doc: "Returns object's elevation"
    - name: end_dialogue
      detail: "void end_dialogue"
      doc: "Terminates the dialogue system."
    - name: endgame_movie
      detail: "void endgame_movie"
      doc: "Plays the endgame movie."
    - name: endgame_slideshow
      detail: "void endgame_slideshow"
      doc: "Plays the endgame slideshow. The slideshow will fade in to its palette, so it is proper to call gfade_out(1) and then expect this command to fix the palette for you."
    - name: explosion
      detail: "int explosion"
      doc: "Sets up an explosion at a given tile number (where) on a given elevation, that will cause damage in a radius."

    - name: fixed_param
      detail: "int fixed_param"
      doc: "Returns the value of the scripts fixed parameter. This is used with add_timer_event, for instance, to pass the info parameter back to the script."
    - name: float_msg
      detail: "void float_msg(ObjectPtr who, string message, int type)"
      doc: "Attempts to create a floating-text message (str) attached to an object (who) using colors dictated by type. There are two special types, WARNING and SEQUENTIAL. WARNING is used to print a message centered on the screen (such as for end-of-quest notifications), and SEQUENTIAL will cycle through the colors, in an attempt to give critters different-colored messages to differentiate them."

    - name: game_ticks
      detail: "int game_ticks(int seconds)"
      doc: "Returns the number of game ticks equal to a given # of seconds."
    - name: game_time
      detail: "int game_time"
      doc: "Returns the current game time in ticks."
    - name: game_time_advance
      detail: "void game_time_advance(int amount)"
      doc: "Advances the current game time by (amount) ticks."
    - name: game_time_hour
      detail: "int game_time_hour"
      doc: "Returns the current hour of the day in a normal format, but without the colon. For example, the current starting game time is 721 (which is 7:21 am)."
    - name: game_ui_disable
      detail: "void game_ui_disable"
      doc: "Disables game user-interface input from the player (to ‘lock-out' the player). You *MUST* make sure to re-enable the UI at some point afterwards."
    - name: game_ui_enable
      detail: "void game_ui_enable"
      doc: "Re-enables game user-interface input from the player. This *MUST* be called relatively soon after disabling the UI or the player will be stuck, unable to do anything."
    - name: game_ui_is_disabled
      detail: "int game_ui_is_disabled"
      doc: "Returns True if the game UI is currently disabled (the player is currently ‘locked-out'), and False otherwise."
    - name: gdialog_barter
      detail: "int gdialog_barter"
      doc: "Tells the dialog system to switch to the barter screen. (Sets the barter modifier to 0)."
    - name: get_critter_stat
      detail: "int get_critter_stat(ObjectPtr who, int stat)"
      doc: "Returns the value of a desired attribute/stat in a critter object (who)."
    - name: get_day
      detail: "int get_day"
      doc: "Returns the current day of the month."
    - name: gdialog_mod_barter
      detail: "int gdialog_mod_barter(int modifier)"
      doc: "Tells the dialog system to switch to the barter screen, using a given modifier (+/- percent)."
    - name: get_month
      detail: "int get_month"
      doc: "Returns the current month of the year."
    - name: get_pc_stat
      detail: "get_pc_stat(int pcStat)"
      doc: "Returns the value of a desired pc-only stat of the obj_dude. These are found in define.h all starting with 'PCSTAT_'."
    - name: get_poison
      detail: "int get_poison(ObjectPtr who)"
      doc: "(Fallout 2 only) Returns the value of a given critters' (who) poison level."
    - name: gdialog_set_barter_mod
      detail: "void gdialog_set_barter_mod(int modifier)"
      doc: "Sets the current modifier for barter to a given percentage (modifier). Used to make barter easier/harder, even if the player initiates barter (as opposed to the script starting it.)"
    - name: gfade_in
      detail: "void gfade_in(int time)"
      doc: "Does a palette fade to black. The time parameter is currently not actually used."
    - name: gfade_out
      detail: "void gfade_out(int time)"
      doc: "Does a palette fade from black to the game palette. The time parameter is currently not actually used."
    - name: giQ_Option
      detail: "void giQ_Option(int iq_test, int msg_list, int msg_num, procedure target, int reaction)"
      doc: "Sets up an option-choice for a reply block if the player's IQ statistic is equal to or greater than a given value (iq_test), getting the string from the message file (msg_list) and message number (msg_num), which will cause a given reaction (reaction), and if chosen will jump to the given (target) procedure."
    - name: give_exp_points
      detail: "void give_exp_points"
      doc: "Adds experience points (points) to the player's total. These points may then be used by the player to enhance skills, etc."
    - name: global_var
      detail: "int global_var(int var_index)"
      doc: "Returns the value of a global variable # (var_index)."
    - name: goto_xy
      detail: "void goto_xy(int map)"
      doc: "Unknown - moves the character to the specific map?"
    - name: gSay_End
      detail: "void gSay_End(unsigned int var_index)"
      doc: "Ends a dialog sequence, which will bring up the sequence (actually display it)."
    - name: gSay_Message
      detail: "void gSay_Message(int msg_list, int msg_num, int reaction)"
      doc: "Sets up a sayMessage, which is a reply with just a [Done] option. The msg_list determines which message file to look in, and the msg_num determines which line to use from the file."
    - name: gSay_Option
      detail: "gSay_Option(int msg_list, int msg_num, procedure target,  int reaction)"
      doc: "Sets up an option-choice for a reply block, getting the string from the message file (msg_list) and message number (msg_num), which will cause a given reaction (reaction), and if chosen will jump to the given (target) procedure."
    - name: gSay_Reply
      detail: "gSay_Reply(int msg_list, int msg_num)"
      doc: "Sets up a reply block (what the *CRITTER* says)."
    - name: gSay_Start
      detail: "void gSay_Start"
      doc: "Starts a new dialog sequence."

    - name: has_skill
      detail: "int has_skill(ObjectPtr who, int skill)"
      doc: "Returns the level of the skill (0-17) of the target critter. (0 to 200 for Fallout 1), (0 to 300 for Fallout 2)"
    - name: has_trait
      detail: "int has_trait(int trait_type, ObjectPtr who, int trait"
      doc: "Returns the value of a given critter object's (who) trait of a given trait_type (see define.h). This can be used to determine if the player has a particular Perk, AI Packet, team num, current rotation, or Trait (finesse, bruiser, etc.)."
    - name: how_much
      detail: "int how_much(int val)"
      doc: "Returns the value of a completed skill vs. skill contest (how much the rolls differed by). This requires that you first call one of the contest roll commands, such as roll_vs_skill, skill_contest, etc."

    - name: inven_count
      detail: "int inven_count(ObjectPtr what)"
      doc: "Returns the count of how many inventory slots are filled on a given object (what)."
    - name: inven_ptr
      detail: "ObjectPtr inven(ObjectPtr what, int slotNum)"
      doc: "Returns a pointer to the object in slot # (slotNum) in a given object (what)."
    - name: inven_unwield
      detail: "void inven_unwield"
      doc: "Attempts to cause a critter to unwield any wielded weapons/items. If animations are currently disabled, it will just instantly change the art."
    - name: is_critical
      detail: "bool is_critical(int val)"
      doc: "Returns True if a given contest roll result is a critical result, otherwise False."
    - name: is_loading_game
      detail: "bool is_loading_game"
      doc: "Returns True if the game is currently loading, False otherwise. This is used so that bad things don't happen on game load because a script is doing map_enter setup stuff."
    - name: is_skill_tagged
      detail: "bool is_skill_tagged(int skillNum)"
      doc: "Returns True if a given skill is tagged."
    - name: is_success
      detail: "int is_success(int val)"
      doc: "Returns True if a given contest roll result value is a success, otherwise False. Can generate Critical Success or Critical Failure as well."
    - name: item_caps_adjust
      detail: "int item_caps_adjust(ObjectPtr obj, int amount)"
      doc: "Modifies the current caps count in an object (obj) by a given amount (amount). Can be positive or negative."
    - name: item_caps_total
      detail: "int item_caps_total(ObjectPtr obj)"
      doc: "Returns the current caps total in a given object's (obj) inventory."

    - name: jam_lock
      detail: "int jam_lock(ObjectPtr lockableObj)"
      doc: "Jams a lock, which prevents the player from picking the lock for approximately 24 hours. Meant to be used when a player critically fails to pick a lock."

    - name: kill_critter
      detail: "void kill_critter(ObjectPtr who, int death_frame)"
      doc: "Kills a critter (obj) outright, placing it in the chosen death frame. Note: this does NOT animate the critter, and does NOT refresh the screen! It is meant to be used in scripts run when entering/exiting a map (map_init/map_exit)."
    - name: kill_critter_type
      detail: "void kill_critter_type(int pid)"
      doc: "Kills all critters of a given type (pid) outright. NOTE: This can result in the 'frozen bodies' issue! kill_critter should always be used instead if possible, for this reason. Frozen bodies causes no actual gameplay issues, but it looks unrealistic and ridiculous."

    - name: language_filter_is_on
      detail: "bool language_filter_is_on"
      doc: "Returns True if the language filter is currently filtering harsh language, False otherwise."
    - name: load_map
      detail: "void load_map(string map_name, int start_location)"
      doc: "Loads a new map (map_name), removing all scripts currently running and passing on the entrance location (start_location) to the new map's map_init script. Can also use the number representing the map in the map list (for example, between 0 to 64 in Fallout 1)"
    - name: local_var
      detail: "int local_var(unsigned int var_index)"
      doc: "Returns the value of a local variable of given index # (var_index). If the user is not allowed local vars up to this number in the list of critters, this can generate errors."

    - name: map_first_run
      detail: "bool map_first_run"
      doc: "Returns True if the current map is being run for the first time (in other words, this map was not loaded from a save-game)."
    - name: map_is_known
      detail: "bool map_is_known(int mapIndex)"
      doc: "Returns True if a given map index is known, False otherwise."
    - name: map_known
      detail: "bool map_known(int mapNum)"
      doc: "Returns True if a given map # (mapNum) is known, False otherwise."
    - name: map_var
      detail: "int map_var(unsigned int var_index)"
      doc: "Returns the value of a map-global variable of a given index # (var_index)."
    - name: message_str
      detail: "char* message_str(int list, int msg_num)"
      doc: "Returns a string from the message module for a given list and a given # (msg_num)."
    - name: move_to
      detail: "int move_to(ObjectPtr obj, int tile_num, int elev)"
      doc: "Immediately moves an object (obj) to the given tile number and elevation (0-2) on the current map."
    - name: move_obj_inven_to_obj
      detail: "move_obj_inven_to_obj(ObjectPtr srcObj, ObjectPtr destObj)"
      doc: "Moves an object's (srcObj) entire inventory into another object's (destObj) inventory."

    - name: obj_art_fid
      detail: "int obj_art_fid(ObjectPtr obj)"
      doc: "Returns the fid # (used to index art) of a given object (obj)."
    - name: obj_being_used_with
      detail: "ObjectPtr obj_being_used_with(ObjectPtr obj)"
      doc: "Returns a pointer to the object being used on another object."
    - name: obj_can_hear_obj
      detail: "bool obj_can_hear_obj(ObjectPtr src_obj, ObjectPtr dst_obj)"
      doc: "Returns True if the source object (src_obj) is capable of hearing the destination object (dst_obj). This includes distance factors, current activity (standing/walking/running), and skill use (stealth/etc.)."
    - name: obj_can_see_obj
      detail: "bool obj_can_see_obj(ObjectPtr src_obj, ObjectPtr dst_obj)"
      doc: "Returns True if the source object (src_obj) has line-of-sight (LOS) with the destination object (dst_obj). This also takes into account perception & stealth rolls of the objects are critters."
    - name: obj_carrying_pid_obj
      detail: "ObjectPtr obj_carrying_pid_obj(ObjectPtr who, int pid)"
      doc: "Returns an Object pointer to an instance of an object of type pid if an object (who) is carrying an object of that type."
    - name: obj_close
      detail: "void obj_close(ObjectPtr what)"
      doc: "Attempts to close a given object (what) if it is of an openable type."
    - name: obj_drop_everything
      detail: "void obj_drop_everything(ObjectPtr who)"
      doc: "Causes a critter object (who) to drop all objects in it's inventory and drop it on the ground at its feet."
    - name: obj_is_carrying_obj_pid
      detail: "int obj_is_carrying_obj_pid(ObjectPtr obj, in pid)"
      doc: "Returns the quantity of objects with matching prototype index #'s (pid) carried in the inventory of another object (obj)."
    - name: obj_is_locked
      detail: "bool obj_is_locked(ObjectPtr what)"
      doc: "Returns True if a given object (what) is a locked object, False if it is unlocked or not a lockable object."
    - name: obj_is_visible_flag
      detail: "bool obj_is_visible_flag(ObjectPtr who)"
      doc: "(Fallout 2 only) Returns True if a given object (who) is turned on (visible), False otherwise."
    - name: obj_is_open
      detail: "bool obj_is_open(ObjectPtr what)"
      doc: "Returns True if a given object (what) is an open object, False if it is closed or not an openable object."
    - name: obj_item_subtype
      detail: "int obj_item_subtype(ObjectPtr item_obj)"
      doc: "Returns the subtype of an object of type 'item'. Examples would be food, armor, weapons, etc."
    - name: "obj_lock"
      detail: "void obj_lock(ObjectPtr what)"
      doc: "Attempts to lock a given object (what) if it is of a lockable type."
    - name: obj_name
      detail: "string obj_name(ObjectPtr obj)"
      doc: "Returns a string representing the name of the given object (what)."
    - name: obj_on_screen
      detail: "bool obj_on_screen(ObjectPtr what)"
      doc: "Returns True if a given object (what) is currently being drawn on-screen, False if it is not."
    - name: obj_open
      detail: "void obj_open(ObjectPtr what)"
      doc: "Attempts to open a given object (what) if it is of an openable type."
    - name: obj_pid
      detail: "int obj_pid(ObjectPtr obj)"
      doc: "Returns the prototype id # (pid) of an object (obj)."
    - name: obj_set_light_level
      detail: "void obj_set_light_level(ObjectPtr obj, int intensity, int distance)"
      doc: "Set the light level for an object to a given intensity (0-100, percentage of possible maximum intensity), and distance of light in hexes (0-8)."
    - name: obj_type
      detail: "int obj_type(ObjectPtr obj)"
      doc: "Returns the type of an object (obj). This would be ‘Item', ‘Wall', ‘Scenery', etc."
    - name: obj_unlock
      detail: "void obj_unlock(ObjectPtr what)"
      doc: "Attempts to unlock a given object (what) if it is of a lockable type."
    - name: override_map_start
      detail: "void override_map_start(int x, int y, int elev, int rot)"
      doc: "Used when loading a new map, this forces the player (obj_dude) to start at a particular location (x/y), elevation (0-2) and rotation (0-5) when first coming up."

    - name: party_add
      detail: "void party_add(ObjectPtr who)"
      doc: "Adds a given critter (who) into the list of party members. This will also setup those objects so that they will not be saved in maps, and certain other things."
    - name: party_member_obj
      detail: "ObjectPtr party_member_obj(int pid)"
      doc: "Returns an ObjectPtr to a party member that matches a given pid. If that critter isn't currently a member of the party, then it will return NULL."
    - name: party_member_count
      detail: "int party_member_count(bool countHidden)"
      doc: "Returns the count of the currently in-party party members. (countHidden) determines whether or not to count the hidden members (hangers-on)."
    - name: party_remove
      detail: "void party_remove(ObjectPtr who)"
      doc: "Removes a given critter (who) from the list of party members. This will also change those objects so that certain object- and map-level things will respond differently to them."
    - name: pickup_obj
      detail: "void pickup_obj(ObjectPtr obj)"
      doc: "Causes the critter self-object to animate and attempt to pick up a given object (obj). If used in regard to a critter, this flag is pinged when a steal detect fails. In other words when detected stealing, pickup_obj is called for the person you were stealing from."
    - name: play_gmovie
      detail: "void play_gmovie(int movieNum)"
      doc: "Plays one of the Fallout movies (full-screen, compressed, etc.)."
    - name: play_sfx
      detail: "play_sfx (string sfxFileName)"
      doc: "Starts a new sound effect to be played on the queue."
    - name: poison
      detail: "void poison(ObjectPtr who, int amount)"
      doc: "Modifies the critter's poison level by a given amount, which can be negative"
    - name: proto_data
      detail: "int proto_data(int pid, int data_member)"
      doc: "Returns the value (can be int or string) of a data-member of a given prototype (pid)."

    - name: radiation_dec
      detail: "void radiation_dec(ObjectPtr who, int amount)"
      doc: "Decrements a critter's radiation counter by a given amount. NOTE: This should only be done to the player (obj_dude) in Fallout due to design restrictions!"
    - name: radiation_inc
      detail: "void radiation_inc(ObjectPtr who, int amount)"
      doc: "Increments a critter's radiation counter by a given amount. NOTE: This should only be done to the player (obj_dude) in Fallout due to design restrictions!"
    - name: random
      detail: "int random(int min, int max)"
      doc: "Returns a random value between (min) and (max), inclusive."
    - name: reg_anim_animate
      detail: "void reg_anim_animate(ObjectPtr what, int anim, int delay)"
      doc: "Adds a single, in-place animation on an object (what) to an animation sequence-list, at a given delay from the previous animation (delay should always be -1)!"
    - name: reg_anim_animate_forever
      detail: "void reg_anim_animate_forever(ObjectPtr what, int anim, int delay)"
      doc: "Adds a single, in-place animation on an object (what) to an animation sequence-list, at a given delay from the previous animation (delay should always be -1)! This animation will animate continuously until something in the system interrupts it. To be used *very* sparingly, for instance Gizmo's sign and the ‘pray' signs in the children of the cathedral (which will have to be toned down)."
    - name: reg_anim_animate_reverse
      detail: "void reg_anim_animate_reverse(ObjectPtr what, int anim, int delay)"
      doc: "Adds a single, in-place reversed animation on an object (what) to an animation sequence-list, at a given delay from the previous animation (delay should always be -1)! reg_anim_begin void Anim Tells the system to start an animation sequence-list."
    - name: reg_anim_clear
      detail: "void reg_anim_clear(ObjectPtr object)"
      doc: "Terminates all animations that are currently registered for a given object."
    - name: reg_anim_end
      detail: "void reg_anim_end"
      doc: " Activates the animation sequence-list. Without this call the animation will never occur. Note: All animation sequences must be registered at ONCE! In other words, you cannot let the script end and finish registering the animations later."
    - name: reg_anim_obj_move_to_obj
      detail: "void reg_anim_obj_move_to_obj(ObjectPtr who, ObjectPtr dest_obj, int delay)"
      doc: "Adds an animation to cause a critter object (who) to attempt to walk to another object (dest_obj) at a given delay from the previous animation (delay should always be -1)!"
    - name: reg_anim_obj_run_to_obj
      detail: "void reg_anim_obj_run_to_obj(ObjectPtr who, ObjectPtr dest_obj, int delay)"
      doc: "Adds an animation to cause a critter object (who) to attempt to run to another object (dest_obj) at a given delay from the previous animation (delay should always be -1)!"
    - name: reg_anim_obj_move_to_tile
      detail: "void reg_anim_obj_move_to_tile(ObjectPtr who, int dest_tile, int delay)"
      doc: "Adds an animation to cause a critter object (who) to attempt to walk to a given destination tile number (dest_tile) at a given delay from the previous animation (delay should always be -1)!"
    - name: reg_anim_obj_run_to_tile
      detail: "void reg_anim_obj_run_to_tile(ObjectPtr who, int dest_tile, int delay)"
      doc: "Adds an animation to cause a critter object (who) to attempt to run to a given destination tile number (dest_tile) at a given delay from the previous animation (delay should always be -1)!"
    - name: reg_anim_play_sfx
      detail: "void reg_anim_play_sfx(ObjectPtr who, string sfx_name, int delay)"
      doc: "Adds an animation to cause an object (who) to attempt to play a given sound effect (sfx_name) at a given delay from the previous animation."
    - name: rm_fixed_timer_event
      detail: "void rm_fixed_timer_event(ObjectPtr who, int fixed_val)"
      doc: "Removes (clears) all timer events hooked to a given object's (obj) script that have a given fixed_value (fixed_val)."
    - name: rm_obj_from_inven
      detail: "void rm_obj_from_inven(ObjectPtr who, ObjectPtr obj)"
      doc: "Removes an object (obj) from another object's (who's) inventory. NOTE: this leaves the removed object in at location (0,1) on the map! You must call move_to(...) to place it back on the map."
    - name: rm_mult_objs_from_inven
      detail: "int rm_mult_objs_from_inven(ObjectPtr who, ObjectPtr obj, int count)"
      doc: "Removes (count) instances of an object (obj) from another object's (who's) inventory. Note: this leaves the removed object in at location (0,1) on the map! You must call move_to(...) to place it back on the map. NOTE: This function returns the actual count that was removed (if you attempted to remove more instances than existed). You *MUST* store this value in a variable (though you don't have to actually do anything with it)."
    - name: rm_timer_event
      detail: "void rm_timer_event(ObjectPtr obj)"
      doc: "Removes (clears) all timer events hooked to a given object's (obj) script."
    - name: roll_dice
      detail: "Critter roll_dice(obj Critter, int skill)"
      doc: "Returns the value of the completed dice roll. NOTE: Avellone says this is unimplemented."
    - name: roll_vs_skill
      detail: "int roll_vs_skill(ObjectPtr who, int skill, int modifier)"
      doc: "Returns the value of a completed skill roll made upon an object's (who's) skill level with a given skill, and modified by a given amount (may be zero). This value may then be passed to is_success and is_critical to determine the appropriate states, and the how_much call can be used to determine the difference succeeded or failed by."
    - name: rotation_to_tile
      detail: "int rotation_to_tile(int srcTile, int destTile)"
      doc: "Returns the rotation (0...5) to face a particular tile (destTile) from a particular tile (srcTile)."
    - name: running_burning_guy
      detail: "int running_burning_guy"
      doc: "Returns the setting for the running-burning-guy in the game (defined in the options screen)."

    - name: scr_return
      detail: "void scr_return"
      doc: "Sets the return value for a scripts C-engine node, to be used by C code."
    - name: script_action
      detail: "int script_action"
      doc: "Returns the action that has activated this script. Examples include requests for the description of an object (description_proc), notifications of a spatial script being activated by something hitting its boundary (spatial_proc), or a critter being given its heartbeat (critter_proc, in other words being told to move)."
    - name: script_overrides
      detail: "void script_overrides"
      doc: "Tells the C-engine that the script will override default behavior for the object. What this means is that the C-engine will not attempt to do things that it would normally do, in expectation that the script will handle those things itself. This is an IMPORTANT command! It is commonly used for the general player actions upon objects, such as looking at them (requesting a description), using them (opening doors, for example), or using items ON them (using a picklock or a key on a door lock)."
    - name: self_obj
      detail: "ObjectPtr self_obj"
      doc: "Returns a pointer to the object connected to this script."
    - name: set_critter_stat
      detail: "int set_critter_stat(ObjectPtr who, int stat, int val)"
      doc: "Sets the value of a desired attribute/stat in a critter (who) to a given value (val)."
    - name: set_exit_grids
      detail: "void set_exit_grids(elevation markElev, int mapID, int elevation, int tileNum, int rotation)"
      doc: "Sets all exit grids on a given elevation (markElev) to point to a destination mapID (may be -1 which means stay on this map), elevation, tileNum, and rotation."
    - name: set_global_var
      detail: "void set_global_var(unsigned int var_index, int value)"
      doc: "Sets the value of a global variable (var_index) to a given (value)."
    - name: set_light_level
      detail: "void set_light_level(int level)."
      doc: "Sets the ambient light level (1-100). The range is Full Darkness to Full Daylight. NOTE: level is NOT percentange, full darkness is not black screen. set_light_level(0) actually corresponds to 25% brightness, and as level increases, brightness makes 2 huge jumps in the middle (49-51). Thus, certain brightness levels simply cannot be set."
    - name: set_local_var
      detail: "void set_local_var(unsigned int var_index, int value)"
      doc: "Sets the value of a local variable (var_index) to a given (value)."
    - name: set_map_var
      detail: "void set_map_var(unsigned int var_index, int value)"
      doc: "Sets the value of a map-global variable (var_index) to a given (value)."
    - name: set_map_start
      detail: "void set_map_start(int x, int y, int elev, int rot)"
      doc: "Sets the start location & rotation (0-5) for the next time this map is entered (loaded & run)."
    - name: set_obj_visibility
      detail: "void set_obj_visibility(ObjectPtr obj, bool visibility)"
      doc: "Sets the OBJ_OFF flag for an object (makes it not drawn)."
    - name: signal_end_game
      detail: "void signal_end_game"
      doc: "Tells the system that a script is indicating the game should be ended. This will return the player to the main-menu."
    - name: SignalNamed
      detail: "void SignalNamed(string event)"
      doc: "Calls events and/or handler for given name (event). See AddNamedEvent and AddNamedHandler to add handlers. This basically just calls the appropriate procedures."
    - name: skill_contest
      detail: "int skill_contest(int skill)"
      doc: "(Fallout 2 only) Returns the value of a completed skill vs skill contest (to run through is_success & is_critical)."
    - name: source_obj
      detail: "ObjectPtr source_obj"
      doc: "Returns a pointer to the source object (activator) for this action. The source object for a pickup_proc (pickup an object script_action) would be the critter picking the object up, for instance."
    - name: start_dialogue
      detail: "void start_dialogue(ObjectPtr who, int mood)"
      doc: "Start the dialogue system focusing on a critter (who) and starting in a given (mood). This call sets up the appropriate dialog windows, head art, etc. If this call is not made before the normal dialog calls (sayReply, sayMessage, sayOption, etc.) then the dialog windows will not come up, and only grey boxes will appear with the text."
    - name: start_gialog
      detail: "void start_gialog(int msgFileNum, ObjectPtr who, int mood, int headNum, int backgroundIdx)"
      doc: "Start the dialogue system focusing on a critter (who) and starting in a given (mood). This call sets up the appropriate dialog windows, head art, etc. If this call is not made before the normal dialog calls (sayReply, sayMessage, sayOption, etc.) then the dialog windows will not come up, and only grey boxes will appear with the text."
    - name: target_obj
      detail: "ObjectPtr target_obj"
      doc: "Returns a pointer to the target object for this action. The target object is what is being acted upon."
    - name: terminate_combat
      detail: "void terminate_combat"
      doc: "Combat Tells the combat system to terminate prematurely. USE WITH CAUTION. This doesn't prevent another (or even the SAME) script from re-starting combat, so make sure you turn off any hostile flags, etc."
    - name: tile_contains_obj_pid
      detail: "bool tile_contains_obj_pid(int tile, int elev, int pid)"
      doc: "Returns True if a particular tile contains an object with a matching prototype index # (obj pid)."
    - name: tile_contains_pid_obj
      detail: "ObjectPtr tile_contains_pid_obj(int tile, int elev, int pid)"
      doc: "Returns a pointer to the first object that matches a particular pid # that is on a particular tile and elevation."
    - name: tile_distance
      detail: "int tile_distance(int tile1, int tile2)"
      doc: "Returns the tile distance between two tile #'s"
    - name: tile_distance_objs
      detail: "int tile_distance_objs(ObjectPtr obj1, ObjectPtr obj2)"
      doc: "Returns the tile distance between two objects (between their tile #'s)."
    - name: tile_is_visible
      detail: "bool tile_is_visible(int tile)"
      doc: "Returns True if a given hex (tile) is currently visible, i.e. an object on it could conceivably be displayed on-screen. This includes hexes that may technically have bases that are off-screen, but on whom objects could exist that would bound into the actual display area."
    - name: tile_num
      detail: "int tile_num(ObjectPtr obj)"
      doc: "Returns the tile number of object (obj)."
    - name: tile_num_in_direction
      detail: "int tile_num_in_direction(int start_tile, int direction, int distance)"
      doc: "Returns the tile number of a tile offset from a starting tile in a given direction (0-5, the next tile in that direction)."
    - name: town_known
      detail: "bool town_known(int townArea)"
      doc: "Returns True if a given town area (townArea) is known, False otherwise."
    - name: town_map
      detail: "void town_map"
      doc: "(Fallout 1 only) Sends a request for the game engine to bring up the Town Map screen, for the player to go to different locations in an area (different areas in Vault13, for example)."

    - name: use_obj
      detail: "void use_obj(ObjectPtr obj)"
      doc: "Use a usable object"
    - name: use_obj_on_obj
      detail: "ObjectPtr use_obj_on_obj(ObjectPtr item, ObjectPtr targetObj)"
      doc: "Attempt to use an item object on a target object (targetObj). This could be used to have a critter use a Stimpack on the player, for instance, or to use a key on a door."
    - name: using_skill
      detail: "bool using_skill(ObjectPtr who, int skill)"
      doc: "Returns True if an active skill is being used, False otherwise. Examples of active skills are Stealth and First Aid."
    - name: violence_level_setting
      detail: "int violence_level_setting"
      doc: "(Fallout 2 only) Returns the current setting of the violence level. See define.h for values."

    - name: wield_obj
      detail: "void wield_obj(ObjectPtr obj)"
      doc: "Sets up an animation causing a critter (self_obj) to wield an object (obj) in that critters' inventory. This puts that object in the critter's hand."
    - name: wield_obj_critter
      detail: "void wield_obj_critter(ObjectPtr who, ObjectPtr obj)"
      doc: "Sets up an animation causing a critter (who) to wield an object (obj) in that critters' inventory. This puts that object in the critter's hand."
    - name: wm_area_set_pos
      detail: "void wm_area_set_pos(int areaIdx, int xPos, int yPos)"
      doc: "Sets the World Map coordinates for a given area/town (areaIdx) to a given x and y position."
    - name: world_map
      detail: "void world_map"
      doc: "Sends a request for the game engine to bring up the World Map screen, for the player to move around to different locations."
    - name: world_map_x_pos
      detail: "int world_map_x_pos"
      doc: "Returns the current X position of the party on the World Map."
    - name: world_map_y_pos
      detail: "int world_map_y_pos"
      doc: "Returns the current Y position of the party on the World Map."

sfall-functions:
  type: 3 #function
  items:
    - name: read_byte
      detail: "int read_byte(int address)"
    - name: read_short
      detail: "int read_short(int address)"
    - name: read_int
      detail: "int read_int(int address)"
    - name: read_string
      detail: "int read_string(int address)"

    - name: write_byte
      detail: "void write_byte(int address, int value)"
    - name: write_short
      detail: void write_short(int address, int value)
    - name: write_int
      detail: void write_int(int address, int value)
    - name: write_string
      detail: void write_string(int address, string value)

    - name: call_offset_v0
      detail: void call_offset_v0(int address)
    - name: call_offset_v1
      detail: void call_offset_v1(int address, int arg1)
    - name: call_offset_v2
      detail: void call_offset_v2(int address, int arg1, int arg2)
    - name: call_offset_v3
      detail: void call_offset_v3(int address, int arg1, int arg2, int arg3)
    - name: call_offset_v4
      detail: void call_offset_v4(int address, int arg1, int arg2, int arg3, int arg4)
    - name: call_offset_r0
      detail: int call_offset_r0(int address)
    - name: call_offset_r1
      detail: int call_offset_r1(int address, int arg1)
    - name: call_offset_r2
      detail: int call_offset_r2(int address, int arg1, int arg2)
    - name: call_offset_r3
      detail: int call_offset_r3(int address, int arg1, int arg2, int arg3)
    - name: call_offset_r4
      detail: int call_offset_r4(int address, int arg1, int arg2, int arg3, int arg4)
    - name: set_pc_base_stat
      detail: void set_pc_base_stat(int StatID, int value)
    - name: set_pc_extra_stat
      detail: void set_pc_extra_stat(int StatID, int value)
    - name: get_pc_base_stat
      detail: int get_pc_base_stat(int StatID)
    - name: get_pc_extra_stat
      detail: int get_pc_extra_stat(int StatID)

    - name: set_critter_base_stat
      detail: void set_critter_base_stat(CritterPtr, int StatID, int value)
    - name: set_critter_extra_stat
      detail: void set_critter_extra_stat(CritterPtr, int StatID, int value)
    - name: get_critter_base_stat
      detail: int get_critter_base_stat(CritterPtr, int StatID)
    - name: get_critter_extra_stat
      detail: int get_critter_extra_stat(CritterPtr, int StatID)
    - name: set_critter_skill_points
      detail: void set_critter_skill_points(int critter, int skill, int value)
    - name: get_critter_skill_points
      detail: int get_critter_skill_points(int critter, int skill)
    - name: set_available_skill_points
      detail: void set_available_skill_points(int value)
    - name: get_available_skill_points
      detail: int get_available_skill_points()

    - name: set_stat_max
      detail: void set_stat_max(int stat, int value)
    - name: set_stat_min
      detail: void set_stat_min(int stat, int value)
    - name: set_pc_stat_max
      detail: void set_pc_stat_max(int stat, int value)
    - name: set_pc_stat_min
      detail: void set_pc_stat_min(int stat, int value)
    - name: set_npc_stat_max
      detail: void set_npc_stat_max(int stat, int value)
    - name: set_npc_stat_min
      detail: void set_npc_stat_min(int stat, int value)

    - name: input_funcs_available
      detail: int input_funcs_available()
    - name: get_window_under_mouse
      detail: int get_window_under_mouse()

    - name: get_year
      detail: int get_year

    - name: graphics_funcs_available
      detail: bool graphics_funcs_available
    - name: load_shader
      detail: int load_shader(string path)
    - name: free_shader
      detail: void free_shader(int ID)
    - name: activate_shader
      detail: void activate_shader(int ID)
    - name: deactivate_shader
      detail: void deactivate_shader(int ID)
    - name: set_shader_int
      detail: void set_shader_int(int ID, string param, int value)
    - name: set_shader_float
      detail: void set_shader_float(int ID, string param, float value)
    - name: set_shader_vector
      detail: void set_shader_vector(int ID, string param, float f1, float f2, float f3, float f4)
    - name: get_shader_version
      detail: int get_shader_version
    - name: set_shader_mode
      detail: void set_shader_mode(int mode)
    - name: force_graphics_refresh
      detail: void force_graphics_refresh(bool enabled)
    - name: get_shader_texture
      detail: int get_shader_texture(int ID, int texture)
    - name: set_shader_texture
      detail: void set_shader_texture(int ID, string param, int texID)

    - name: set_global_script_repeat
      detail: void set_global_script_repeat(int frames)
    - name: set_global_script_type
      detail: void set_global_script_type(int type)
    - name: available_global_script_types
      detail: int available_global_script_types

    - name: in_world_map
      detail: bool in_world_map

    - name: force_encounter
      detail: void force_encounter(int map)
    - name: force_encounter_with_flags
      detail: void force_encounter_with_flags(int map, int flags)
    - name: set_map_time_multi
      detail: void set_map_time_multi(float multi)

    - name: set_world_map_pos
      detail: void set_world_map_pos(int x, int y)
    - name: get_world_map_x_pos
      detail: int get_world_map_x_pos
    - name: get_world_map_y_pos
      detail: int get_world_map_y_pos()

    - name: set_dm_model
      detail: void set_dm_model(string name)
    - name: set_df_model
      detail: void set_df_model(string name)
    - name: set_movie_path
      detail: void set_movie_path(string filename, int movieid)

    - name: set_perk_image
      detail: void set_perk_image(int perkID, int value)
    - name: set_perk_ranks
      detail: void set_perk_ranks(int perkID, int value)
    - name: set_perk_level
      detail: void set_perk_level(int perkID, int value)
    - name: set_perk_stat
      detail: void set_perk_stat(int perkID, int value)
    - name: set_perk_stat_mag
      detail: void set_perk_stat_mag(int perkID, int value)
    - name: set_perk_skill1
      detail: void set_perk_skill1(int perkID, int value)
    - name: set_perk_skill1_mag
      detail: void set_perk_skill1_mag(int perkID, int value)
    - name: set_perk_type
      detail: void set_perk_type(int perkID, int value)
    - name: set_perk_skill2
      detail: void set_perk_skill2(int perkID, int value)
    - name: set_perk_skill2_mag
      detail: void set_perk_skill2_mag(int perkID, int value)
    - name: set_perk_str
      detail: void set_perk_str(int perkID, int value)
    - name: set_perk_per
      detail: void set_perk_per(int perkID, int value)
    - name: set_perk_end
      detail: void set_perk_end(int perkID, int value)
    - name: set_perk_chr
      detail: void set_perk_chr(int perkID, int value)
    - name: set_perk_int
      detail: void set_perk_int(int perkID, int value)
    - name: set_perk_agl
      detail: void set_perk_agl(int perkID, int value)
    - name: set_perk_lck
      detail: void set_perk_lck(int perkID, int value)
    - name: set_perk_name
      detail: void set_perk_name(int perkID, string value)
    - name: set_perk_desc
      detail: void set_perk_desc(int perkID, string value)
    - name: set_perk_freq
      detail: void set_perk_freq(int value)

    - name: set_pipboy_available
      detail: void set_pipboy_available(int available)

    - name: get_kill_counter
      detail: int get_kill_counter(int critterType)
    - name: mod_kill_counter
      detail: void mod_kill_counter(int critterType, int amount)

    - name: get_perk_owed
      detail: int get_perk_owed
    - name: set_perk_owed
      detail: void set_perk_owed(int value)
    - name: get_perk_available
      detail: int get_perk_available(int perk)

    - name: get_critter_current_ap
      detail: int get_critter_current_ap(CritterPtr)
    - name: set_critter_current_ap
      detail: void set_critter_current_ap(CritterPtr, int ap)

    - name: active_hand
      detail: int active_hand
    - name: toggle_active_hand
      detail: void toggle_active_hand

    - name: set_weapon_knockback
      detail: void set_weapon_knockback(WeaponPtr, int type, float value)
    - name: set_target_knockback
      detail: void set_target_knockback(CritterPtr, int type, float value)
    - name: set_attacker_knockback
      detail: void set_attacker_knockback(CritterPtr, int type, float value)
    - name: remove_weapon_knockback
      detail: void remove_weapon_knockback(WeaponPtr)
    - name: remove_target_knockback
      detail: void remove_target_knockback(CritterPtr)
    - name: remove_attacker_knockback
      detail: void remove_attacker_knockback(CritterPtr)

    - name: set_sfall_global
      detail: void set_sfall_global(string/int varname, int/float value)
    - name: get_sfall_global_int
      detail: int get_sfall_global_int(string/int varname)
    - name: get_sfall_global_float
      detail: float get_sfall_global_float(string/int varname)

    - name: set_pickpocket_max
      detail: void set_pickpocket_max(int percentage)
    - name: set_hit_chance_max
      detail: void set_hit_chance_max(int percentage)
    - name: set_skill_max
      detail: void set_skill_max(int value)
    - name: set_xp_mod
      detail: void set_xp_mod(int percentage)
    - name: set_perk_level_mod
      detail: void set_perk_level_mod(int levels)

    - name: set_critter_hit_chance_mod
      detail: void set_critter_hit_chance_mod(CritterPtr, int max, int mod)
    - name: set_base_hit_chance_mod
      detail: void set_base_hit_chance_mod(int max, int mod)
    - name: set_critter_skill_mod
      detail: void set_critter_skill_mod(CritterPtr, int max)
    - name: set_base_skill_mod
      detail: void set_base_skill_mod(int max)

    - name: eax_available
      detail: int eax_available
    - name: set_eax_environment
      detail: void set_eax_environment(int environment)

    - name: inc_npc_level
      detail: void inc_npc_level(string npc)
    - name: get_npc_level
      detail: int get_npc_level(string npc)

    - name: get_viewport_x
      detail: int get_viewport_x()
    - name: get_viewport_y
      detail: int get_viewport_y()
    - name: set_viewport_x
      detail: void set_viewport_x(int view_x)
    - name: set_viewport_y
      detail: void set_viewport_y(int view_y)

    - name: set_car_current_town
      detail: void set_car_current_town(int town)

    - name: set_fake_perk
      detail: void set_fake_perk(string name, int level, int image, string desc)
    - name: set_fake_trait
      detail: void set_fake_trait(string name, int active, int image, string desc)
    - name: set_selectable_perk
      detail: void set_selectable_perk(string name, int active, int image, string desc)
    - name: set_perkbox_title
      detail: void set_perkbox_title(string title)
    - name: hide_real_perks
      detail: void hide_real_perks()
    - name: show_real_perks
      detail: void show_real_perks()
    - name: has_fake_perk
      detail: int has_fake_perk(string name)
    - name: has_fake_trait
      detail: int has_fake_trait(string name)
    - name: perk_add_mode
      detail: void perk_add_mode(int type)
    - name: clear_selectable_perks
      detail: void clear_selectable_perks()
    - name: remove_trait
      detail: void remove_trait(int traitID)

    - name: set_pyromaniac_mod
      detail: void set_pyromaniac_mod(int bonus)
    - name: apply_heaveho_fix
      detail: void apply_heaveho_fix
    - name: set_swiftlearner_mod
      detail: void set_swiftlearner_mod(int bonus)
    - name: set_hp_per_level_mod
      detail: void set_hp_per_level_mod(int mod)

    - name: show_iface_tag
      detail: void show_iface_tag(int tag)
    - name: hide_iface_tag
      detail: void hide_iface_tag(int tag)
    - name: is_iface_tag_active
      detail: int is_iface_tag_active(int tag)

    - name: get_bodypart_hit_modifier
      detail: int get_bodypart_hit_modifier(int bodypart)
    - name: set_bodypart_hit_modifier
      detail: void set_bodypart_hit_modifier(int bodypart, int value)

    - name: set_critical_table
      detail: void set_critical_table(int crittertype, int bodypart, int level, int valuetype, int value)
    - name: get_critical_table
      detail: int get_critical_table(int crittertype, int bodypart, int level, int valuetype)
    - name: reset_critical_table
      detail: void reset_critical_table(int crittertype, int bodypart, int level, int valuetype)

    - name: set_unspent_ap_bonus
      detail: void set_unspent_ap_bonus(int multiplier)
    - name: get_unspent_ap_bonus
      detail: int get_unspent_ap_bonus()
    - name: set_unspent_ap_perk_bonus
      detail: void set_unspent_ap_perk_bonus(int multiplier)
    - name: get_unspent_ap_perk_bonus
      detail: int get_unspent_ap_perk_bonus()

    - name: ceil
      detail: int ceil(float)

    - name: set_palette
      detail: void set_palette(string path)

    - name: remove_script
      detail: void remove_script(objptr)
    - name: set_script
      detail: void set_script(objptr, int scriptid)
    - name: get_script
      detail: int get_script(objptr)

    - name: nb_create_char
      detail: int nb_create_char()

    - name: fs_create
      detail: int fs_create(string path, int size)
    - name: fs_copy
      detail: int fs_copy(string path, string source)
    - name: fs_find
      detail: int fs_find(string path)
    - name: fs_write_byte
      detail: void fs_write_byte(int id, int data)
    - name: fs_write_short
      detail: void fs_write_short(int id, int data)
    - name: fs_write_int
      detail: void fs_write_int(int id, int data)
    - name: fs_write_float
      detail: void fs_write_float(int id, int data)
    - name: fs_write_string
      detail: void fs_write_string(int id, string data)
    - name: fs_write_bstring
      detail: void fs_write_bstring(int id, string data)
    - name: fs_read_byte
      detail: int fs_read_byte(int id)
    - name: fs_read_short
      detail: int fs_read_short(int id)
    - name: fs_read_int
      detail: int fs_read_int(int id)
    - name: fs_read_float
      detail: float fs_read_float(int id)
    - name: fs_delete
      detail: void fs_delete(int id)
    - name: fs_size
      detail: int fs_size(int id)
    - name: fs_pos
      detail: int fs_pos(int id)
    - name: fs_seek
      detail: void fs_seek(int id, int pos)
    - name: fs_resize
      detail: void fs_resize(int id, int size)

    - name: get_proto_data
      detail: int get_proto_data(int pid, int offset)
    - name: set_proto_data
      detail: void set_proto_data(int pid, int offset, int value)

    - name: list_begin
      detail: int list_begin(int type)
    - name: list_next
      detail: int list_next(int listid)
    - name: list_end
      detail: void list_end(int listid)
    - name: list_as_array
      detail: array list_as_array(int type)

    - name: sfall_ver_major
      detail: int sfall_ver_major()
    - name: sfall_ver_minor
      detail: int sfall_ver_minor()
    - name: sfall_ver_build
      detail: int sfall_ver_build()

    - name: hero_select_win
      detail: void hero_select_win(int)
    - name: set_hero_race
      detail: void set_hero_race(int style)
    - name: set_hero_style
      detail: void set_hero_style(int style)

    - name: set_critter_burst_disable
      detail: void set_critter_burst_disable(int critter, int disable)

    - name: get_weapon_ammo_pid
      detail: int get_weapon_ammo_pid(objptr weapon)
    - name: set_weapon_ammo_pid
      detail: void set_weapon_ammo_pid(objptr weapon, int pid)
    - name: get_weapon_ammo_count
      detail: int get_weapon_ammo_count(objptr weapon)
    - name: set_weapon_ammo_count
      detail: void set_weapon_ammo_count(objptr weapon, int count)

    - name: get_screen_width
      detail: int get_screen_width()
    - name: get_screen_height
      detail: int get_screen_height()

    - name: stop_game
      detail: void stop_game()
    - name: resume_game
      detail: void resume_game()
    - name: create_message_window
      detail: void create_message_window(string message)

    - name: get_light_level
      detail: int get_light_level()

    - name: refresh_pc_art
      detail: void refresh_pc_art

    - name: get_attack_type
      detail: int get_attack_type

    - name: play_sfall_sound
      detail: int play_sfall_sound(string file, int loop)
    - name: stop_sfall_sound
      detail: void stop_sfall_sound(int ptr)

    - name: atoi
      detail: int atoi(string text)
    - name: atof
      detail: float atof(string text)

    - name: get_tile_fid
      detail: int get_tile_fid(int tile)

    - name: modified_ini
      detail: int modified_ini

    - name: force_aimed_shots
      detail: void force_aimed_shots(int pid)
    - name: disable_aimed_shots
      detail: void disable_aimed_shots(int pid)

    - name: mark_movie_played
      detail: void mark_movie_played(int id)

    - name: tile_under_cursor
      detail: int tile_under_cursor
    - name: gdialog_get_barter_mod
      detail: int gdialog_get_barter_mod
    - name: set_inven_ap_cost
      detail: void set_inven_ap_cost

    - name: key_pressed
      detail: int key_pressed(int dxScancode)
    - name: tap_key
      detail: void tap_key(int dxScancode)
    - name: get_mouse_x
      detail: int get_mouse_x()
    - name: get_mouse_y
      detail: int get_mouse_y()
    - name: get_mouse_buttons
      detail: int get_mouse_buttons()
      doc: Returns the number of the mouse button that is currently pressed (1 - left, 2 - right, 3 - left+right, 4 - middle, 0 otherwise).

    - name: block_combat
      detail: void block_combat(bool value)
      doc: Deny the player to enter combat mode.
    - name: game_loaded
      detail: int game_loaded()
      doc: Returns 1 the first time it is called after a new game or game load, and 0 any time after.
    - name: get_ini_setting
      detail: int get_ini_setting(string setting)
      doc: Reads an integer value from an ini file in the fallout directory.
    - name: get_ini_string
      detail: string get_ini_string(string setting)
      doc: Reads a string value from an ini file in the fallout directory.
    - name: get_game_mode
      detail: int get_game_mode()
      doc: A more flexible version of in_world_map. It will return a set of flags indicating which mode the game is currently in.
    - name: get_uptime
      detail: int get_uptime()
      doc: Just a wrapper around the windows GetTickCount() function. It's useful for making time fade effects in shaders, since they already have access to the current tick count.
    - name: set_self
      detail: void set_self(objptr)
      doc: Overrides the scripts self_obj for the next function call.
    - name: mod_skill_points_per_level
      detail: void mod_skill_points_per_level(int value)
      doc: Accepts a value of between -100 and 100, and modifies the number of skill points the player recieves when they level up.
    - name: seq_perk_freq
      detail: void seq_perk_freq(int value)
      doc: Sets the number of levels between each perk.
    - name: get_last_target
      detail: ObjectPtr get_last_target(objptr critter)
      doc: Will return the last critter to be deliberately attacked.
    - name: get_last_attacker
      detail: ObjectPtr get_last_attacker(objptr critter)
      doc: Will return the last critter to deliberately launch an attack against the argument critter.
    - name: set_base_pickpocket_mod
      detail: void set_base_pickpocket_mod(int max, int mod)
      doc: Changes maximum chance of success and chance mod for each steal attempt.
    - name: set_critter_pickpocket_mod
      detail: void set_critter_pickpocket_mod(CritterPtr, int max, int mod)
      doc: The same as set_base_pickpocket, but applies only to specific critter.
    - name: reg_anim_combat_check
      detail: void reg_anim_combat_check(int enable)
      doc: Allows to enable all reg_anim_* functions in combat (including vanilla functions) if set to 0. It is automatically reset at the end of each frame, so you need to call it before "reg_anim_begin" - "reg_anim_end" block.
    - name: reg_anim_destroy
      detail: void reg_anim_destroy(objptr)
      doc: Given object is destroyed at the end of current animation set.
    - name: reg_anim_animate_and_hide
      detail: void reg_anim_animate_and_hide(objptr, int animID, int delay)
      doc: Exactly like "reg_anim_animate" but the object will automatically disappear after the last animation frame (but not destroyed).
    - name: reg_anim_light
      detail: void reg_anim_light(objptr, int light, int delay)
      doc: "Change light of any object. Light argument is a light radius (0-8), but you can use highest 2 bytes to pass light intensity as well (example: 0xFFFF0008 - intensity 65535 and radius 8). | If highest 2 bytes are 0, intensity will not be changed. Intensity range is from 0 to 65535 (0xFFFF)"
    - name: reg_anim_change_fid
      detail: void reg_anim_change_fid(objptr, int FID, int delay)
      doc: Should work like art_change_fid_num but in reg_anim sequence.
    - name: reg_anim_take_out
      detail: void reg_anim_take_out(objptr, holdFrameID, delay)
      doc: Plays "take out weapon" animation for given holdFrameID. It is not required to have such weapon in critter's inventory.
    - name: reg_anim_turn_towards
      detail: void reg_anim_turn_towards(objptr, int tile/target, delay)
      doc: Makes object change it's direction to face given tile num or target object.
    - name: metarule2_explosions
      detail: int metarule2_explosions(int arg1, int arg2)
      doc: Was made as a dirty easy hack to allow dynamically change some explosion parameters (ranged attack). All changed parameters are reset to vanilla state automatically after each attack action.
    - name: set_attack_explosion_pattern
      detail: void set_attack_explosion_pattern(x, y)
      doc: "Currently y is not used and x means: 1 - reduced explosion pattern (3 effects are spawned instead of 7), 0 - full pattern."
    - name: set_attack_explosion_art
      detail: void set_attack_explosion_art(x, y)
      doc: y not used and x is a misc frame ID (last 3 bytes, without object type) to use for the next explosion.
    - name: set_attack_explosion_radius
      detail: void set_attack_explosion_radius(x)
      doc: Changes radius at which explosion will hit secondary targets for the next attack (from the experiments it is limited to something around 8 by the engine).
    - name: set_attack_is_explosion_fire
      detail: void set_attack_is_explosion_fire
      doc: If you call this right before using a weapon with fire damage type, it will produce explosion effects (and radius damage) just like "explosion" type, but all targets will still recieve fire damage.
    - name: string_split
      detail: array string_split(string, split)
      doc: Takes a string and a seperator, searches the string for all instances of the seperator, and returns a temp array filled with the pieces of the string split at each instance. If you give an empty string as the seperator, the string is split into individual characters.
    - name: substr
      detail: string substr(string, start, length)
      doc: 'Cuts a substring from a string starting at "start" up to "length" characters. | If start is negative - it indicates starting position from the end of the string (for example substr("test", -2, 2) will return last 2 charactes: "st"). | If length is negative - it means so many characters will be omitted from the end of string (example: substr("test", 0, -2) will return string without last 2 characters: "te").'
    - name: strlen
      detail: int strlen(string text)
      doc: Returns string length
    - name: sprintf
      detail: string sprintf(string format, any value)
      doc: Formats given value using standart syntax of C printf function (google "printf" for format details). However it is limited to formatting only 1 value.
    - name: typeof
      detail: int typeof(any value)
      doc: "Returns type of the given value: VALTYPE_INT, VALTYPE_FLOAT or VALTYPE_STR."
    - name: charcode
      detail: int charcode(string text)
      doc: Returns ASCII code for the first character in given string
    - name: log
      detail: float log(float x)
      doc: Natural logarithm of x.
    - name: exponent
      detail: float exponent(float x)
      doc: E^X
    - name: round
      detail: int round(float x)
      doc: Round x to the nearest integer.
    - name: sqrt
      detail: float sqrt(float x)
      doc: Square root of x.
    - name: abs
      detail: float abs(float x)
      doc: Absolute (positive) value of x.
    - name: sin
      detail: float sin(float x)
      doc: Sine of x
    - name: cos
      detail: float cos(float x)
      doc: Cosine of x
    - name: tan
      detail: float tan(float x)
      doc: Tangent of x.
    - name: arctan
      detail: float arctan(float x, float y)
      doc: Arctangent of x.
    - name: message_str_game
      detail: string message_str_game(int fileId, int messageId)
      doc: Works exactly the same as message_str, except you get messages from files in "text/english/game" folder.
    - name: sneak_success
      detail: int sneak_success
      doc: Returns 1 if last sneak attempt (roll against skill) was successful, 0 otherwise.
    - name: tile_light
      detail: int tile_light(int elevation, int tileNum)
      doc: Returns light intensity at the given tile in range from 0 to 65535.
    - name: obj_blocking_line
      detail: ObjectPtr obj_blocking_line(ObjectPtr objFrom, int tileTo, int blockingType)
      doc: Returns first object which blocks direct linear path from objFrom to tileTo using selected blocking function (see BLOCKING_TYPE_* constants in sfall.h).
    - name: obj_blocking_tile
      detail: ObjectPtr obj_blocking_tile(int tileNum, int elevation, int blockingType)
      doc: Returns first object blocking given tile using given blocking function or 0 if tile is clear.
    - name: tile_get_objs
      detail: array tile_get_objs(int tileNum, int elevation)
      doc: Returns array of all objects at given tile.
    - name: party_member_list
      detail: array party_member_list(int includeHidden)
      doc: Returns array of all current party members | (0 - only critter-type, alive and visible will be returned, 1 - all object, including Trunk, etc.)
    - name: path_find_to
      detail: array path_find_to(ObjectPtr objFrom, int tileTo, int blockingType)
      doc: Returns the shortest path to a given tile using given blocking function as an array of tile directions (0..5) to move on each step.
    - name: create_spatial
      detail: ObjectPtr create_spatial(int scriptID, int tile, int elevation, int radius)
      doc: Creates new spatial script with given SID, at given tile, and radius.
    - name: art_exists
      detail: int art_exists(int artFID)
      doc: "checks if given artFID exists in the game | - Useful when you want to check if critter can use specific weapon: art_exists((artFid bwand 0xffff0fff) bwor (weaponAnim * 0x1000))."
    - name: obj_is_carrying_obj
      detail: int (ObjectPtr invenObj, ObjectPtr itemObj)
      doc: Returns number of itemObj inside invenObj's inventory, note that both arguments are object pointers.

sfall-hooks:
  type: 3 #function
  items:
    - name: init_hook
      detail: int init_hook()
      doc: The hook script equivilent of game_loaded; it returns 2 when the script is first loaded, 1 when the player reloads and 0 otherwise.
    - name: get_sfall_arg
      detail: mixed get_sfall_arg()
      doc: Gets the next argument from sfall. Each time it's called it returns the next argument, or otherwise it returns 0 if there are no more arguments left.
    - name: get_sfall_args
      detail: int get_sfall_args()
      doc: Returns all hook arguments as a new temp array.
    - name: set_sfall_return
      detail: void set_sfall_return(int value)
      doc: Used to return the new values from the script. Each time it's called it sets the next value, or if you've already set all return values it does nothing.
    - name: set_sfall_arg
      detail: void set_sfall_arg(int argnum, int value)
      doc: Changes argument value. This is usefull if you have several hook scripts attached to one hook point (see below).
    - name: register_hook
      detail: void register_hook(int hooktype)
      doc: Used from a normal global script if you want to run it at the same point a full hook script would normally run.
    - name: register_hook_proc
      detail: void register_hook_proc(int hooktype, proc procedure)
      doc: The same as register_hook, except that you specifically define which procedure in the current script should be called as a hook (instead of "start").

sfall-arrays:
  type: 3 #function
  items:
    - name: create_array
      detail: int create_array(int size, int nothing)
      doc: Creates permanent array (but not "saved").
    - name: temp_array
      detail: int temp_array(int size, int nothing)
      doc: Works exactly like "create_array", only created array becomes "temporary."
    - name: fix_array
      detail: void fix_array(int arrayID)
      doc: Changes "temporary" array into "permanent" ("permanent" arrays are not automatically saved into savegames).
    - name: set_array
      detail: void set_array(int arrayID, mixed key, mixed value)
      doc: "Sets array value (shorthand: arrayID[key] := value)."
    - name: get_array
      detail: mixed get_array(int arrayID, mixed key)
      doc: "Returns array value by key or index (shorthand: arrayID[key])."
    - name: resize_array
      detail: void resize_array(int arrayID, int size)
      doc: Changes array size.
    - name: free_array
      detail: void free_array(int arrayID)
      doc: Deletes any array.
    - name: scan_array
      detail: mixed scan_array(int arrayID, mixed value)
      doc: Searches for a first occurence of given value inside given array.
    - name: len_array
      detail: int len_array(int arrayID)
      doc: Returns number of elements or key=>value pairs in a given array.
    - name: array_key
      detail: mixed array_key(int arrayID, int index)
      doc: Don't use it directly; it is generated by the compiler in foreach loops.
    - name: arrayexpr
      detail: int arrayexpr(mixed key, mixed value)
      doc: Don't use it directly; it is used by compiler to create array expressions.
    - name: save_array
      detail: void save_array(mixed key, int arrayID)
      doc: Array is saved (arrayID is associated with given "key").
    - name: load_array
      detail: int load_array(mixed key)
      doc: Load array from savegame data by the same key provided in "save_array".

sfall-funcs:
  type: 3 # function
  items:
    - name: sfall_func0
      detail: any sfall_func0(char* funcName)
      doc: Calls scripting function with given name and no arguments.
    - name: sfall_func1
      detail: any sfall_func1(char* funcName, arg1)
      doc: Calls scripting function with given name and 1 argument.
    - name: sfall_func2
      detail: any sfall_func2(char* funcName, arg1, arg2)
      doc: Calls scripting function with given name and 2 arguments.
    - name: sfall_func3
      detail: any sfall_func3(char* funcName, arg1, arg2, arg3)
      doc: Calls scripting function with given name and 3 arguments.
    - name: sfall_func4
      detail: any sfall_func4(char* funcName, arg1, arg2, arg3, arg4)
      doc: Calls scripting function with given name and 4 arguments.
    - name: sfall_func5
      detail: any sfall_func5(char* funcName, arg1, arg2, arg3, arg4, arg5)
      doc: Calls scripting function with given name and 5 arguments.
    - name: sfall_func6
      detail: any sfall_func6(char* funcName, arg1, arg2, arg3, arg4, arg5, arg6)
      doc: Calls scripting function with given name and 6 arguments

sfall-funcs-macro:
  type: 3 # function
  items:
    - name: attack_is_aimed
      detail: bool attack_is_aimed()
      doc: Returns True if the aimed attack mode is selected, False otherwise.
    - name: critter_inven_obj2
      detail: ObjectPtr critter_inven_obj2(ObjectPtr obj, int type)
      doc: Allows get the item in the inactive hand slot. For more details, see the description for the standard function critter_inven_obj.
    - name: item_weight
      detail: int item_weight(ObjectPtr obj)
      doc: Gets the current weight of an object.
    - name: outlined_object
      detail: ObjectPtr outlined_object()
      doc: Returns an object that is currently highlighted by hovering the mouse above it.
    - name: get_outline
      detail: int get_outline(ObjectPtr obj)
      doc: Gets the current outline color for an object.
    - name: set_outline
      detail: void set_outline(ObjectPtr obj, int color)
      doc: "Sets the outline color of an object. Note: 0 means or any value above 0x00FFFFFF disables the outline."
    - name: get_flags
      detail: int get_flags(ObjectPtr obj)
      doc: Gets the current value of object flags (see define_extra.h for available flags).
    - name: set_flags
      detail: void set_flags(ObjectPtr obj, int flags)
      doc: Sets the current flags of an object.
    - name: real_dude_obj
      detail: ObjectPtr real_dude_obj()
      doc: Returns the initial dude_obj after set_dude_obj was used.
    - name: set_dude_obj
      detail: void set_dude_obj(ObjectPtr critter)
      doc: Take control of a given critter. Passing value 0 will reset control back to "real" dude.
    - name: lock_is_jammed
      detail: bool lock_is_jammed(ObjectPtr obj)
      doc: Returns True if the lock (container or scenery) is currently jammed, False otherwise.
    - name: unjam_lock
      detail: void unjam_lock(ObjectPtr obj)
      doc: Unjams a lock immediately without having to wait until the next day, or leave the map and then return after 24 hours.
    - name: set_unjam_locks_time
      detail: void set_unjam_locks_time(int time)
      doc: "Sets after how many hours (up to 127 hours) jammed locks will be unjammed if the player leaves the map. Also disables the auto unjam that occurs at midnight when the player is on the map. Passing 0 will disable the auto unjam mechanism completely. Note: The auto unjam mechanism will be reset each time the player reloads the game."
    - name: exec_map_update_scripts
      detail: void exec_map_update_scripts()
      doc: Executes map_update_p_proc for all objects on map and global/hook scripts as well.
    - name: spatial_radius
      detail: int spatial_radius(ObjectPtr obj)
      doc: Return radius of spatial script, associated with given dummy-object.
    - name: set_map_enter_position
      detail: void set_map_enter_position(int tile, int elev, int rot)
      doc: "Overrides the player's entry position when entering the map through exit grids. Setting the tile to 0 will put the player on the start hex (default tile and elevation) of the map. Note: Works only in map_enter_p_proc procedure."
    - name: get_map_enter_position
      detail: array get_map_enter_position()
      doc: "Returns an array of the player's position data (index: 0 - tile, 1 - elevation, 2 - rotation) when entering the map through exit grids. If entering from the world map, the tile value will be -1. Note: Should be called in map_enter_p_proc procedure to get the correct position data."
    - name: set_rest_heal_time
      detail: void set_rest_heal_time(int time)
      doc: "Sets the time interval in minutes for healing during resting. The default is 180. Note: The time interval will be reset each time the player reloads the game."
    - name: set_rest_mode
      detail: void set_rest_mode(int flags)
      doc: "Sets the bit flags for the rest mode (see RESTMODE_* constants in sfall.h). Passing 0 will reset the rest mode. Note: It will also be reset each time the player reloads the game."
    - name: car_gas_amount
      detail: int car_gas_amount()
      doc: "Returns current amount of fuel in player's car between 0 and 80000. Note: To change fuel amount, use vanilla function: metarule(METARULE_GIVE_CAR_GAS, amount)."
    - name: set_car_intface_art
      detail: void set_car_intface_art(int artIndex)
      doc: "Changes the interface art (index in LST file) for the car image on worldmap screen. Note: Should be called before going to worldmap."
    - name: tile_refresh_display
      detail: void tile_refresh_display()
      doc: Redraws the game scene (tiles, walls, objects, etc.).
    - name: display_stats
      detail: void display_stats()
      doc: "Updates player stats in the inventory screen display window. Note: Works only in opened player inventory."
    - name: intface_is_hidden
      detail: bool intface_is_hidden()
      doc: Returns True if interface is currently hidden, False otherwise.
    - name: intface_redraw
      detail: void intface_redraw()
      doc: Redraws main game interface.
    - name: inventory_redraw
      detail: void inventory_redraw(invSide)
      doc: "Redraws inventory items list in the inventory/loot/barter screens. Argument invSide specifies which side needs to be redrawn: 0 - the player, 1 - target (container/NPC in loot/barter screens)."
    - name: get_cursor_mode
      detail: int get_cursor_mode()
      doc: "Returns the current cursor mode. Values: 0 - movement cursor, 1 - command cursor, 2 - targeting cursor, 4 to 10 are Skilldex skills (yellow targeting cursor)."
    - name: set_cursor_mode
      detail: void set_cursor_mode(int mode)
      doc: Sets the current cursor mode.
    - name: set_iface_tag_text
      detail: void set_iface_tag_text(int tag, string text, int color)
      doc: "Sets the text messages and colors for custom notification boxes to the interface. Tag value is the same as used in show_iface_tag, hide_iface_tag, and is_iface_tag_active. Available colors: 0 - green, 1 - red, 2 - white, 3 - yellow, 4 - dark yellow, 5 - blue, 6 - purple."
    - name: get_ini_section
      detail: array get_ini_section(string file, string sect)
      doc: Returns an associative array of keys and values for a given INI file and section.
    - name: get_ini_sections
      detail: array get_ini_sections(string file)
      doc: Returns an array of names of all sections in a given INI file.
    - name: set_ini_setting
      detail: void set_ini_setting(string setting, int/string value)
      doc: "Writes an integer or a string value to an ini file in the Fallout directory. The setting argument works in the same way as in get_ini_setting, seperate the file name, section and key with a '|' character. Note: The section name is limited to 32 characters."
